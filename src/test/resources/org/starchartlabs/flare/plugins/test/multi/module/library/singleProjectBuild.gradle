plugins {
    id  'org.starchartlabs.flare.multi-module-library'
    id 'java'
    id 'jacoco'
    id 'maven-publish'
    id 'com.jfrog.bintray' version '1.8.4'
}

description = "description"

projectMetaData{
    url = 'http://url'
    
    scm {
        vcsUrl = 'http://scm/url'
        connection = 'scm/connection'
        developerConnection = 'scm/developerConnection'
    }
    
    developers {
        developer 'developer/id', 'developer/name', 'developer/url'
    }
    
    contributors {
        contributor 'contributor/name', 'contributor/url'
    }
    
    licenses {
        license 'license/name', 'license/tag', 'license/url', 'license/distribution'
        apache2()
        mit 'mit/distribution'
        epl 'epl/distribution'
    }
}

repositories {
    jcenter()
}

dependencies {
    testCompile 'org.testng:testng'
}

test {
    useTestNG() {
        useDefaultListeners = true
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
        }
    }
}

repositories {
    mavenLocal()
}

task outputManagedCredentials{
    doFirst {
        project.logger.lifecycle("Bintray Credentials: u${bintray.user}:k${bintray.key}")
    }
    doLast{
        credentials.all{
            project.logger.lifecycle("Credentials configured: ${it.name}")
        }
    }
}

task outputTestLogging {
    doLast{
        tasks.withType(Test).all {
            project.logger.lifecycle("${it.name} Exception format: ${it.testLogging.exceptionFormat}")
            
            project.logger.lifecycle("${it.name} Quiet logging: ${it.testLogging.quiet.events}")
            project.logger.lifecycle("${it.name} Info logging: ${it.testLogging.info.events}")
            project.logger.lifecycle("${it.name} Debug logging: ${it.testLogging.debug.events}")
        }
    }
}

task outputMavenArtifacts {
    doLast {
        publishing.publications.each { publication ->
            publication.artifacts.withType(MavenArtifact.class) { artifact ->
                project.logger.lifecycle("Artifact Verification: ${publication.name}:${artifact.classifier}")
            }
            
        }
    }
}

task metaDataPrintout {
    doLast{
        project.logger.lifecycle("url: ${projectMetaData.url}")
        
        project.logger.lifecycle("scm.vcsUrl: ${projectMetaData.scm.vcsUrl}")
        project.logger.lifecycle("scm.connection: ${projectMetaData.scm.connection}")
        project.logger.lifecycle("scm.developerConnection: ${projectMetaData.scm.developerConnection}")
        
        projectMetaData.developers.each { developer ->
            project.logger.lifecycle("developer: ${developer.id}:${developer.name}:${developer.url}")
        }
        
        projectMetaData.contributors.each { contributor ->
            project.logger.lifecycle("contributor: ${contributor.name}:${contributor.url}")
        }
        
        projectMetaData.licenses.each { license ->
            project.logger.lifecycle("license: ${license.name}:${license.tag}:${license.url}:${license.distribution}")
        }
    }
}

check.dependsOn outputManagedCredentials
check.dependsOn outputTestLogging
check.dependsOn outputMavenArtifacts
check.dependsOn metaDataPrintout
check.dependsOn generatePomFileForMavenPublication
